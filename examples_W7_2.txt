
// test the address and size of an array ******************************************************************************/
#include <iostream>
using namespace std;

int main()
{
    const size_t arraySize{5};
    
    int n[arraySize];
    
    cout<<"The first location of array n is "<<n<<endl;
    cout<<&n<<endl;
    cout<<"The size of array n is "<< sizeof(n)<<endl;
    cout<<"The size of array n is "<< arraySize;
    
    return 0;
}


// test the address in C++ style *****************************************************************************/
#include <iostream>
#include <array>
using namespace std;

int main()
{
    const size_t arraySize{5};
    
    array<int, arraySize>n;
    
   // cout<<"The first location of array n is "<<n<<endl;
    cout<<&n<<endl;
    cout<<"The size of array n is "<< sizeof(n)<<endl;
    cout<<"The size of array n is "<< arraySize;
    
    return 0;
}



// 2D array ****************************************************************************/
#include <iostream>
#include <array>
using namespace std;

    const size_t rows{2};
    const size_t columns{3};
int main() {
    array<array<int, columns>, rows> array1{1, 2, 3, 4, 5, 6};
    cout << "Values in array1 by row are:" << endl;

    // loop through array's rows
    for (size_t row{0}; row<array1.size(); row++) {
    // loop through columns of current row
        for (size_t col{0}; col<array1[row].size(); col++) {
            cout << array1[row][col]<< ' ';
        }
    cout << endl; // start new line of output
    }
}


// pass array by pointer *******************************************************************************/
#include <iostream>
#include <array>
using namespace std;

const size_t arraySize{5};
void printArray(std::array<int, arraySize> &m);

int main()
{
    array<int, arraySize>n{1,2,3,4,5};
    printArray(n);
    
    return 0;
}

void printArray(array<int, arraySize> &m){
    for(size_t i{0}; i<m.size(); i++)
    cout<<"n["<<i<<"] = "<<m[i]<<endl;
}





// bubble sort *****************************************************************************/
#include <iostream>
#include <iomanip>
#include <array>
using namespace std;

int main()
{
    const size_t arraySize{10}; // must initialize in declaration
    array<int, arraySize> a{2, 6, 4, 8, 10, 12, 89, 68, 45, 37};
    int hold; // temporary location used to swap array elements
    cout <<"Data items in original order \n";
    // output original array
    for (size_t i{0}; i < a.size(); ++i)
       cout << setw(4) << a[i];
    // bubble sort
    // loop to control number of passes
    for (size_t pass{0}; pass < a.size()-1; ++pass)
    {
        // loop to control number of comparisons per pass
        for (size_t j{ 0 }; j < a.size()-1; ++j)
            // compare side‐by‐side elements and swap them if
            // first element is greater than second element
            if (a[j] > a[j + 1])
            {
                hold = a[j];
                a[j] = a[j+ 1];
                a[j + 1]= hold;
           }
    }
    cout << "\n\nData items in ascending order\n";
    // output sorted array
    for (int k = 0; k < arraySize; k++)
    cout << setw(4) << a[k] ;
    cout << endl;
return 0;
}


// vector *****************************************************************************/


#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

int main() {
    vector<int> intVect(7); // 7‐element vector<int>

    // print intVect size and contents
    cout << "The size of vector intVect is " << intVect.size();
    cout << "\nintVect: ";
    for (int item : intVect) {
        cout << item << " ";
    }
    return 0;
}


// add element at the end of vector*******************************************************************************/
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

int main() {
    vector<int> intVect(7); // 7‐element vector<int>

    // print intVect size and contents
    cout << "The size of vector intVect is " << intVect.size();
    cout << "\nintVect: ";
    for (int item : intVect) {
        cout << item << " ";
    }
    cout << endl;
    intVect.push_back(5);
    cout << "The size of vector intVect is " << intVect.size();
    cout << "\nintVect: ";
    for (int item : intVect) {
        cout << item << " ";
    }
    return 0;
}